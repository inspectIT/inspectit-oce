import com.github.jk1.license.render.TextReportRenderer

plugins {
    id 'com.github.jk1.dependency-license-report' version '1.6'
}

licenseReport {
    outputDir = "$projectDir/build/licenses"

    renderers = [new TextReportRenderer("THIRD-PARTY-LICENSES.txt")]

}


allprojects {

    repositories {
        mavenCentral()
        maven {
            name 'Nexus@NT'
            url "http://repository.novatec-gmbh.de/content/repositories/3rd_party_libs/"
        }
    }
    apply plugin: 'jacoco'

    if (!project.hasProperty('buildVersion') || project.getProperty('buildVersion').empty) {
        ext.buildVersion = 'SNAPSHOT'
    }

    version = "$buildVersion"
}

subprojects {


    apply plugin: 'java'

    configurations {
        buildTools
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        buildTools(
                'jarcheck:jarcheck:1.5'
        )
        compileOnly 'org.projectlombok:lombok:1.18.4'
        annotationProcessor 'org.projectlombok:lombok:1.18.4'
        testImplementation (
                'org.junit.jupiter:junit-jupiter-api:5.3.1',
                'org.mockito:mockito-junit-jupiter:2.23.0'
        )
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // use jarCheck to make sure all classes in our dependencies are at maximum in version 1.8
    task checkDependencyJavaVersions {
        def excludes = ["byte-buddy"]

        def jarCheckPath = "$buildDir/jarCheck"
        outputs.dir jarCheckPath

        doFirst {
            def jarCheckOutput = new File(jarCheckPath)
            jarCheckOutput.mkdirs()
            configurations.runtimeClasspath.each { file ->
                def name = file.name
                def isExcluded = excludes.stream().anyMatch({ excl ->
                    name.contains(excl)
                })
                if (!isExcluded && file.exists()) {
                    javaexec {
                        classpath configurations.buildTools
                        main = 'com.mindprod.jarcheck.JarCheck'
                        args = ["$file", "1.0", "1.8"]
                        standardOutput = new File(jarCheckOutput, "$name-check.log").newOutputStream()
                    }
                }
            }
        }
    }
    jar.dependsOn checkDependencyJavaVersions
}

task codeCoverageReport(type: JacocoReport) {
    group = 'Verification'
    description = 'Generates a combined report from all subprojects'

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco/html")
        csv.enabled false
    }
}
codeCoverageReport.dependsOn {
    subprojects*.test
    project(':inspectit-ocelot-agent').systemTest
}