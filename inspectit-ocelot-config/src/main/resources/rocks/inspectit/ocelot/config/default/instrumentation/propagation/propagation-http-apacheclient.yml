inspectit:
  instrumentation:
      
    data:

      apache_http_client_propagation_performed: {is-tag: false}
      apache_http_client_propagation_is_entry: {is-tag: false, down-propagation: NONE}

    actions:
      apache_http_client_down_propagation:
        is-void: true
        imports:
          - java.util
          - org.apache.http
        input:
          _arg1: HttpMessage
          _context: InspectitContext
        value-body: |
          Map headers = _context.getDownPropagationHeaders();
          Iterator it = headers.entrySet().iterator();
          while(it.hasNext()) {
            Map$Entry e = (Map$Entry) it.next();
            _arg1.setHeader((String) e.getKey(), (String) e.getValue());
          }

      apache_http_client_up_propagation:
        is-void: true
        imports:
          - java.util
          - org.apache.http
        input:
          _returnValue: HttpMessage
          _context: InspectitContext
        value-body: |
          if(_returnValue != null) {
            Collection headerKeys = _context.getPropagationHeaderNames();
            Map presentHeaders = new HashMap();
            Iterator it = headerKeys.iterator();
            while(it.hasNext()) {
              String name = (String) it.next();
              Header[] headers = _returnValue.getHeaders(name);
              if (headers != null && headers.length > 0) {
                StringBuilder sb = new StringBuilder();
                for(int i = 0; i< headers.length; i++) {
                  String value = headers[i].getValue();
                  if(value != null) {
                    if(sb.length() > 0) {
                      sb.append(',');
                    }
                    sb.append(value);
                  }
                }
                presentHeaders.put(name, sb.toString());
              }
            }
            _context.readUpPropagationHeaders(presentHeaders);
          }

    rules:
      http_propagation_apache_doExecute:
        scopes:
          apache_http_client_doExecute: true

        post-entry:
          apache_http_client_propagation_is_entry:
            action: test_and_set_marker
            constant-input: { marker: apache_http_client_propagation_performed}
          do_down_propagation:
            action: apache_http_client_down_propagation
            only-if-true: apache_http_client_propagation_is_entry
          
        pre-exit:
          do_up_propagation:
            action: apache_http_client_up_propagation
            only-if-true: apache_http_client_propagation_is_entry
