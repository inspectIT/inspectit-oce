
inspectit:
  instrumentation:
    data-providers:
      #-----------------------DataProvidersTest.verifyArgumentsAccessible ------------------------
      readNameViaArg0:
        imports:
          - rocks.inspectit.ocelot.instrumentation
        input:
          _arg0: NamedElement
        value: _arg0.getName()
      readNameViaArgs:
        imports:
          - rocks.inspectit.ocelot.instrumentation
        input:
          _args: Object[]
        value: ((NamedElement)_args[0]).getName()
      reverse:
        input:
          str: String
        value-body: |
          StringBuilder sb =  new StringBuilder(str);
          sb.reverse();
          return sb.toString();
      toUpperCase:
        input:
          str: String
        value: str.toUpperCase()
      #-----------------------DataProvidersTest.verifyArgumentsAccessible ------------------------
      addDurationToArg:
        imports:
          - java.time
        input:
          _args: Object[]
          argIndex : int
          durationToAdd: Duration
        value: new Long( ((Duration)(_args[argIndex])).toMillis() + durationToAdd.toMillis() )
      #-----------------------DataProvidersTest.testDefaultMethodInstrumented ------------------------
      #---------------------- also used in InstrumentationScopesTest ---------------------------------
      readNameViaThis:
        imports:
          - rocks.inspectit.ocelot.instrumentation
        input:
          _this: NamedElement
        value: _this.getName()

    scopes:
      DataProvidersTest-argumentAccessTest:
        type:
          name: DataProvidersTest
          matcher-mode: ENDS_WITH
        methods:
          - name: argumentAccessTest
      DataProvidersTest-constantParsingTest:
        type:
          name: rocks.inspectit.ocelot.instrumentation.DataProvidersTest
        methods:
          - name: constantParsingTest

      DataProvidersTest-conditionsTest:
        type:
          name: rocks.inspectit.ocelot.instrumentation.DataProvidersTest
        methods:
          - name: conditionsTest



    rules:
      DataProvidersTest-argumentAccessTest:
        scopes:
          DataProvidersTest-argumentAccessTest: true
        entry:
          name_via_arg0: {provider: readNameViaArg0}
          name_via_args: {provider: readNameViaArgs}
          name_reversed: {provider: reverse, data-input: {str : name_via_arg0}}
          name_reversed_upper: {provider: toUpperCase, data-input: {str : name_reversed}}
      DataProvidersTest-constantParsingTest:
        scopes:
          DataProvidersTest-constantParsingTest: true
        entry:
          result:
            provider: addDurationToArg
            constant-input:
              argIndex: 0
              durationToAdd: "2s"

      DataProvidersTest-conditionsTest:
        scopes:
          DataProvidersTest-conditionsTest : true
        entry:
          something: {provider: set, constant-input: { value: "hello world"}}
          true_bool: {provider: set, constant-input: { value: true}}
          false_bool: {provider: set, constant-input: { value: false}}

          only_if_true_executed: {only-if-true: true_bool, provider: set, constant-input: { value: "yes"}}
          only_if_true_skipped: {only-if-true: false_bool, provider: set, constant-input: { value: "yes"}}
          only_if_true_also_skipped: {only-if-true: not_existing, provider: set, constant-input: { value: "yes"}}

          only_if_false_executed: {only-if-false: false_bool, provider: set, constant-input: { value: "yes"}}
          only_if_false_skipped: {only-if-false: true_bool, provider: set, constant-input: { value: "yes"}}
          only_if_false_also_skipped: {only-if-false: not_existing, provider: set, constant-input: { value: "yes"}}

          only_if_null_executed: {only-if-null: not_existing, provider: set, constant-input: { value: "yes"}}
          only_if_null_skipped: {only-if-null: something, provider: set, constant-input: { value: "yes"}}

          only_if_not_null_executed: {only-if-not-null: something, provider: set, constant-input: { value: "yes"}}
          only_if_not_null_skipped: {only-if-not-null: not_existing, provider: set, constant-input: { value: "yes"}}