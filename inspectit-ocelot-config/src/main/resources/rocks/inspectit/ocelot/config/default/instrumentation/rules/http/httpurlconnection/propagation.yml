# ----------------------------------------------------------------------------------
# Defines Rules and Actions enabling down & up propagation on HTTPUrlConnection
# ----------------------------------------------------------------------------------

inspectit:
  instrumentation:
    actions:
      'a_httpurlconnection_downPropagation':
        is-void: true
        imports:
          - java.util
          - java.net
        input:
          '_this': 'HttpURLConnection'
          '_attachments': 'ObjectAttachments'
          '_context': 'InspectitContext'
        value-body: |
          Object propagationAlreadyPerformed = _attachments.attach(_this, "down_prop_performed", Boolean.TRUE);
          if(propagationAlreadyPerformed == null) {
            try {
              Map headers = _context.getDownPropagationHeaders();
              Iterator it = headers.entrySet().iterator();
              while(it.hasNext()) {
                Map$Entry e = (Map$Entry) it.next();
                _this.addRequestProperty((String) e.getKey(), (String) e.getValue());
              }
            } catch(Exception e) {
              // silently ignore, this will occur if the url has already been connected
              // normally does not happen, as we also instrument connect()
              // it can still happen if connect() is instrumented last
            }
          }

      a_httpurlconnection_upPropagation:
        is-void: true
        imports:
          - java.util
          - java.net
        input:
          '_this': 'HttpURLConnection'
          '_attachments': 'ObjectAttachments'
          '_context': 'InspectitContext'
        value-body: |
          Object propagationAlreadyPerformed = _attachments.attach(_this, "up_prop_performed", Boolean.TRUE);
          if(propagationAlreadyPerformed == null) {
            Collection headerKeys = _context.getPropagationHeaderNames();
            Map presentHeaders = new HashMap();
            Iterator it = headerKeys.iterator();
            while(it.hasNext()) {
              String name = (String) it.next();
              List values = _this.getHeaderFields().get(name);
              if (values != null) {
                presentHeaders.put(name, String.join(",", values));
              }
            }
            _context.readUpPropagationHeaders(presentHeaders);
          }

    rules:
    
      'r_httpurlconnection_down_propagation':
        scopes:
          's_httpurlconnection_connect': true
          's_httpurlconnection_getOutputStream': true
          's_httpurlconnection_getInputStream': true
        include:
          'r_httpurlconnection_detect_entry': true
        post-entry:
          do_down_propagation:
            only-if-true: http_is_entry
            action: a_httpurlconnection_downPropagation

      'r_httpurlconnection_up_propagation':
        scopes:
          's_httpurlconnection_getInputStream': true
        include:
          'r_httpurlconnection_detect_entry': true
        pre-exit:
          'do_up_propagation':
            only-if-true: 'http_is_entry'
            action: 'a_httpurlconnection_upPropagation'