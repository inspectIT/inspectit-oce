
inspectit:
  instrumentation:


    data:
      name_via_arg0: {down-propagation: JVM_LOCAL, is-tag: true}
      name_via_args: {down-propagation: JVM_LOCAL, is-tag: true}
      name_reversed: {down-propagation: JVM_LOCAL, is-tag: true}
      name_reversed_upper: {down-propagation: JVM_LOCAL, is-tag: true}
      name: {down-propagation: JVM_LOCAL, is-tag: true}
      result: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_true_executed: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_true_skipped: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_true_also_skipped: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_false_executed: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_false_skipped: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_false_also_skipped: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_null_executed: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_null_skipped: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_not_null_executed: {down-propagation: JVM_LOCAL, is-tag: true}
      only_if_not_null_skipped: {down-propagation: JVM_LOCAL, is-tag: true}

    actions:
      #-----------------------GenericActionsTest.verifyArgumentsAccessible ------------------------
      readNameViaArg0:
        imports:
          - rocks.inspectit.ocelot.instrumentation
        input:
          _arg0: NamedElement
        value: _arg0.getName()
      readNameViaArgs:
        imports:
          - rocks.inspectit.ocelot.instrumentation
        input:
          _args: Object[]
        value: ((NamedElement)_args[0]).getName()
      reverse:
        input:
          str: String
        value-body: |
          StringBuilder sb =  new StringBuilder(str);
          sb.reverse();
          return sb.toString();
      toUpperCase:
        input:
          str: String
        value: str.toUpperCase()
      #-----------------------GenericActionsTest.verifyArgumentsAccessible ------------------------
      addDurationToArg:
        imports:
          - java.time
        input:
          _args: Object[]
          argIndex : int
          durationToAdd: Duration
        value: new Long( ((Duration)(_args[argIndex])).toMillis() + durationToAdd.toMillis() )
      #-----------------------GenericActionsTest.testDefaultMethodInstrumented ------------------------
      #---------------------- also used in InstrumentationScopesTest ---------------------------------
      readNameViaThis:
        imports:
          - rocks.inspectit.ocelot.instrumentation
        input:
          _this: NamedElement
        value: _this.getName()

    scopes:
      GenericActionsTest-argumentAccessTest:
        type:
          name: GenericActionsTest
          matcher-mode: ENDS_WITH
        methods:
          - name: argumentAccessTest
      GenericActionsTest-constantParsingTest:
        type:
          name: rocks.inspectit.ocelot.instrumentation.GenericActionsTest
        methods:
          - name: constantParsingTest

      GenericActionsTest-conditionsTest:
        type:
          name: rocks.inspectit.ocelot.instrumentation.GenericActionsTest
        methods:
          - name: conditionsTest



    rules:
      GenericActionsTest-argumentAccessTest:
        scopes:
          GenericActionsTest-argumentAccessTest: true
        entry:
          name_via_arg0: {action: readNameViaArg0}
          name_via_args: {action: readNameViaArgs}
          name_reversed: {action: reverse, data-input: {str : name_via_arg0}}
          name_reversed_upper: {action: toUpperCase, data-input: {str : name_reversed}}
      GenericActionsTest-constantParsingTest:
        scopes:
          GenericActionsTest-constantParsingTest: true
        entry:
          result:
            action: addDurationToArg
            constant-input:
              argIndex: 0
              durationToAdd: "2s"

      GenericActionsTest-conditionsTest:
        scopes:
          GenericActionsTest-conditionsTest : true
        entry:
          something: {action: a_assign_value, constant-input: { value: "hello world"}}
          true_bool: {action: a_assign_value, constant-input: { value: true}}
          false_bool: {action: a_assign_value, constant-input: { value: false}}

          only_if_true_executed: {only-if-true: true_bool, action: a_assign_value, constant-input: { value: "yes"}}
          only_if_true_skipped: {only-if-true: false_bool, action: a_assign_value, constant-input: { value: "yes"}}
          only_if_true_also_skipped: {only-if-true: not_existing, action: a_assign_value, constant-input: { value: "yes"}}

          only_if_false_executed: {only-if-false: false_bool, action: a_assign_value, constant-input: { value: "yes"}}
          only_if_false_skipped: {only-if-false: true_bool, action: a_assign_value, constant-input: { value: "yes"}}
          only_if_false_also_skipped: {only-if-false: not_existing, action: a_assign_value, constant-input: { value: "yes"}}

          only_if_null_executed: {only-if-null: not_existing, action: a_assign_value, constant-input: { value: "yes"}}
          only_if_null_skipped: {only-if-null: something, action: a_assign_value, constant-input: { value: "yes"}}

          only_if_not_null_executed: {only-if-not-null: something, action: a_assign_value, constant-input: { value: "yes"}}
          only_if_not_null_skipped: {only-if-not-null: not_existing, action: a_assign_value, constant-input: { value: "yes"}}