inspectit:

  # the name of the service which is being instrumented
  service-name: "InspectIT Agent"

  # defines common tags to be be set on the metrics
  tags:
    # different tag providers that can be configured
    providers:
      # environment provider adds 'service-name', 'host' and 'host-address' tags
      environment:
        # if environment provider is enabled
        enabled: true
        # should the host name be resolved using InetAddress.getLocalHost(), if false 'host' tag is not added by env provider
        resolve-host-name: true
        # should the host address be resolved using InetAddress.getLocalHost(), if false 'host-address' tag is not added by env provider
        resolve-host-address: true

    # specifies user defined tag keys and values as a map
    # these tag values would overwrite any value added by the providers, thus you can easily overwrite tags values by your own
    extra: {}

  # all configurations sources
  config:
    # file based configuration - has the highest priority
    # loads all .yaml/yml and .properties files in alphabetical order from the given path
    # is active when path is not empty or null and enabled is set to true
    file-based:
      # the path to the directory to scan for configuration files
      # scanning happens non-recursive meaning that no subdirectories will be parsed
      path:
      # can be used to disable the file based configuration while the path is still specified
      enabled: true
      # if true the directory will be watched for changes. When changes occur, the configuration is automatically reloaded
      watch: true
      # The frequency at which the target folder should be polled for changes if 'watch' is true.
      # If the frequency is set to zero, a OS notification based approach is used instead of polling.
      # However, depending on the filesystem OS notification might not work, e.g. for network filesystems.
      frequency: 5s

  # settings regarding the instrumentation performed on the target application
  instrumentation:

#    # specifying instrumentation scopes which are used by rules for targeting classes and methods
#    # please see the documentation for detailed information about this configuration item
#    scopes:
#      # the id of the following defined scope element - this example scope targets the ArrayList's contains method
#      example-list-scope:
#        # the targeted type - classes which should be instrumented have to match ALL of the specified elements within the type scope
#        type-scope:
#          # interfaces which have to be implemented
#          interfaces:
#            - name: "java.util.List"
#              matcher-mode: "EQUALS_FULLY"
#          # the superclass which has to be extended
#          superclass:
#            name: "java.util.AbstractList"
#            matcher-mode: "EQUALS_FULLY"
#          # matcher describing the class' name (full qualified)
#          type:
#            name: "ArrayList"
#            matcher-mode: "ENDS_WITH"
#        # the targeted method - each method which matches at least one of the defined matchers will be instrumented
#        method-scope:
#          - name: "contains"
#            matcher-mode: "EQUALS_FULLY"
#            visibility: [PUBLIC]
#            arguments: ["java.lang.Object"]
#            is-synchronized: false
#          - is-constructor: true
#            arguments: []
#        # advances settings which can be used to specify and narrow the instrumentation
#        advanced:
#          instrument-only-inherited-methods: false
#          disable-safety-mechanisms: false

#    # definition of the instrumentation rules
#    # please see the documentation for detailed information about this configuration item
#    rules:
#      # the id of the following defined rule element - this is an example rule
#      example-rule:
#        # specifies whether the rule is enabled or not
#        enabled: true
#        # the scopes used by this rule
#        scopes:
#          example-list-scope: true

    # settings for special sensors
    special:
      # enables or disables the instrumentation to ensure context propagation across java.util.concurrent.Executor instances
      executor-context-propagation: true
      # enables or disables the instrumentation for context propagation via java.util.concurrent.ScheduledExecutorService
      scheduled-executor-context-propagation: true
      # enables or disables the instrumentation to ensure context propagation across java.lang.Thread instances
      thread-start-context-propagation: true

    # settings for fine-tuning the instrumentation process
    internal:
      # the time to pause between executing batches of class instrumentation updates
      inter-batch-delay: 50ms
      # defines how many classes are checked at once for updates of their configuration
      class-configuration-check-batch-size: 1000
      # defines the maximum number of classes which are retransformed at once per batch
      class-retransform-batch-size: 10

      # defines how often the agent should check if new classes have been defined.
      # this check is only performed if Classloader.defineClass was called less than ${max-class-definition-delay} seconds ago
      new-class-discovery-interval: 10s
      # defines how often after the last invocation of a ClassFileTransformer the agent scans for new classes
      num-class-discovery-trials: 2

    # defines all bootstrap packages whose classes and subpackages should be ignored
    # the given strings are matches as prefixes for classes, therefore packages have to end with a dot
    # however, for the trailing dots to be interpreted correctly you need to enclose the package in '[<package>]'
    ignored-bootstrap-packages:
      '[rocks.inspectit.]': true
      '[io.opencensus.]': true
      '[io.grpc.]': true
      '[com.lmax.disruptor.]': true
      '[com.google.]': true
      '[java.lang.invoke.]': true

  # settings for configuring OpenCensus stats and trace exporters
  exporters:
    # settings for metrics exporters
    metrics:
      # settings for the prometheus exporter (https://github.com/census-instrumentation/opencensus-java/tree/master/exporters/stats/prometheus)
      prometheus:
        # if true, the agent will try to start the Prometheus stats exporter
        enabled: true
        # the hostname or IP-address on which the /metrics endpoint of prometheus will be started.
        host: 0.0.0.0
        # the port on which the /metrics endpoint of prometheus will be started
        port: 8888

  # general settings regarding metrics capturing
  metrics:
    # master switch for metrics capturing. When set to false the following happens:
    #  - all metrics exporters are disabled
    #  - all metrics recorders are disabled
    enabled: true
    # root setting for the polling frequency of all metrics
    # when a metrics has no frequency defined separately, this frequency will be used
    frequency: 15s
    # settings regarding disk related metrics
    disk:
      enabled:
        # if true, the free disk space will be measured and the view "disk/free" is registered
        free: true
        # if true, the total disk space will be measured and the view "disk/total" is registered
        total: true
      # specifies the frequency with which the disk metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}
    # settings regarding the measurement of the loaded classes
    classloader:
      enabled:
        # if true, the number of loaded classes will be captured
        loaded: true
        # if true, the number of unloaded classes will be captures
        unloaded: true
      # specifies the frequency with which the classloader metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}
    # settings regarding the capturing of processor related metrics
    processor:
      enabled:
        # if true, the number of processors available to the jvm will be captured
        count: true
        # if true, the average load of the last minute of the system load will be captured
        system.average: true
        # if true, the current cpu usage of the system will be captured
        system.usage: true
        # if true, the current cpu usage of this process will be captured
        process.usage: true
      # specifies the frequency with which the processor metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}
    # settings regarding the capturing of threads related metrics
    threads:
      enabled:
        # if true, the peak number of live threads since JVM start is captured
        peak: true
        # if true, the current daemon thread count is captured
        daemon: true
        # if true, the current total number of live threads is captured
        live: true
        # if true, for each thread state the number of live threads will be captured
        states: true
      # specifies the frequency with which the thread metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}
    # settings regarding the capturing of garbage collection related metrics
    gc:
      enabled:
        # if true, the maximum size of the old generation pool is captured
        max.data.size: true
        # if true, the size of the old generation pool after a full GC is captured
        live.data.size: true
        # if true, the time spent in the concurrent gc phase is captured
        concurrent.phase.time: true
        # if true, the time spent during gc pauses is captured
        pause: true
        # if true, the count of positive increases in the size of the old generation memory pool before GC to after GC is captured
        memory.promoted: true
        # if true, the increase in the size of the young generation memory pool after one GC to before the next is captured
        memory.allocated: true
    # settings regarding the capturing of memory related metrics
    memory:
      enabled:
        # if true, the amount of used memory will be captured
        used: true
        # if true, the amount of committed memory for the JVM to use will be captured
        committed: true
        # if true, the maximum amount of memory that can be used for memory management will be captured
        max: true
        # if true, an estimate of the number of buffers for each buffer pool will be captured
        buffer.count: true
        # if true, an estimate of the used memory for each buffer pool will be captured
        buffer.used: true
        # if true, the total capacity of the buffers for each buffer pool will be captured
        buffer.capacity: true
      # specifies the frequency with which the memory metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}

  # logging settings
  logging:
      # path to a custom user-specified logback config file that should be used
      config-file:
      # properties below only work if the default inspectIT OCE logback config file is used
      # sets the inspectIT OCE log level to TRACE
      trace: false
      # sets the level to DEBUG (only if trace is false)
      debug: false
      # settings for the console output
      console:
        # defines if the console output is enabled
        enabled: true
        # defines a custom pattern to output to the console
        pattern:
      # settings for the file-based log output
      # inspectIT OCE will create two log files: agent.log and exceptions.log
      file:
        # defines if the file-based log output is enabled
        enabled: true
        # defines a custom pattern to output to the console
        pattern:
        # defines a custom path where log files should be placed (defaults to /tmp/inspectit-oce)
        path:
        # if the default pattern should include the service name (specified with inspectit.service-name)
        # helpful when you run more than one service on the same host
        include-service-name: true

  # self monitoring, when enabled inspectit reports execution times for metrics and traces collection and processing
  self-monitoring:
    # if self monitoring is enabled
    enabled: false
    # what should be the prefix for the self monitoring measures
    measure-prefix: inspectit/self/

  # defines how many threads inspectIT may start for its internal tasks
  thread-pool-size: 2

  # If true, the OpenCensus API and Implementation will be loaded by the bootstrap classloader.
  # Otherwise they will be loaded by the private inspectIT classloader.
  publish-opencensus-to-bootstrap: false