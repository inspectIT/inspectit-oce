inspectit:

  instrumentation:  

    rules:

      servicegraph_httpurlconnection_setup_propagation:

        scopes:
          httpurlconnection_connect: true
          httpurlconnection_getOutputStream: true
          httpurlconnection_getInputStream: true

        entry:
          prop_origin_service:
            action: set
            data-input: {value: service}
    
      servicegraph_httpurlconnection_record:
      
        scopes:
          httpurlconnection_getInputStream: true
          
        entry:
          servicegraph_is_entry:
            action: test_and_set_this_marker
            constant-input: { marker: servicegraph_httpurlconnection_entry_found}
          
          servicegraph_call_entry: { action: timestamp_nanos }

          prop_target_service:
            action: setNull
            only-if-true: servicegraph_is_entry
          
        exit:
          target_service: 
            action: set
            data-input: {value: prop_target_service}
            reads-before-written: {prop_target_service: true}
          
          #store the target host in case this is an external call (=the target_service is unknown)
          target_external:
            action: httpurlconnection_get_host
            only-if-true: servicegraph_is_entry
            only-if-null: target_service
          protocol:
            action: set
            constant-input: { value: "http"}
            
          servicegraph_call_duration:
            action: elapsed_millis
            data-input: {sinceNanos: servicegraph_call_entry }
            only-if-true: servicegraph_is_entry
          
          #restore the target to our service in case an up-propagation for this server will happen
          prop_target_service:
            action: set
            data-input: {value: service}
            only-if-true: servicegraph_is_entry
          
        metrics:
          '[service/out/responsetime]': servicegraph_call_duration