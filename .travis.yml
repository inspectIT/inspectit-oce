language: java
dist: trusty
jdk:
  - oraclejdk8
  - oraclejdk9
  - oraclejdk11
  - openjdk8

#enable caching
before_cache:
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/

cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/ibm-jdk-installer/

install: true
script: ./gradlew test systemTest

after_failure:
  - chmod +x ./resources/upload-test-reports.sh
  - ./resources/upload-test-reports.sh

jobs:
  include:
    - name: "JDK ibmjdk8 Java"
      sudo: true
      install:
        - wget -nc -O $HOME/ibm-jdk-installer/ibm-sdk.bin https://s3-eu-west-1.amazonaws.com/inspectit-oce-files/ibm-java-sdk-8.0-5.26-x86_64-archive.bin || true
        - sudo chmod +x $HOME/ibm-jdk-installer/ibm-sdk.bin
        - echo "INSTALLER_UI=silent" > $HOME/ibm-install.properties
        - echo "USER_INSTALL_DIR=$HOME/ibm-jdk-8" >> $HOME/ibm-install.properties
        - echo "LICENSE_ACCEPTED=TRUE" >> $HOME/ibm-install.properties
        - export PS1=">"
        - sudo $HOME/ibm-jdk-installer/ibm-sdk.bin -i silent -f $HOME/ibm-install.properties
        - sudo update-alternatives --install "/usr/bin/java" "java" "$HOME/ibm-jdk-8/bin/java" 1
        - sudo update-alternatives --set "java" "$HOME/ibm-jdk-8/bin/java"
        - sudo update-alternatives --install "/usr/bin/javac" "javac" "$HOME/ibm-jdk-8/bin/javac" 1
        - sudo update-alternatives --set "javac" "$HOME/ibm-jdk-8/bin/javac"
        - export JAVA_HOME=$HOME/ibm-jdk-8
        - java -version
      script: ./gradlew test systemTest
      after_failure:
        - chmod +x ./resources/upload-test-reports.sh
        - ./resources/upload-test-reports.sh

    - stage: deploy
      name: "Code Coverage Reporting"
      jdk: oraclejdk8
      install: ./gradlew build codeCoverageReport
      script:
        # upload coverage report
        - bash <(curl -s https://codecov.io/bash)

    - name: "Create and Release Artifacts"
      jdk: oraclejdk8
      sudo: true
      rvm:
        - 2.4
      before_install:
        - if [ -z "${TRAVIS_TAG}" ]; then RELEASE_VERSION="SNAPSHOT-${TRAVIS_BUILD_NUMBER}"; else RELEASE_VERSION="${TRAVIS_TAG}";fi
        - echo "Setting version to $RELEASE_VERSION"
        - if [ -z "${TRAVIS_TAG}" ]; then echo "Not release build - skipping docker login."; else echo "$DOCKER_HUB_PW" | docker login -u "$DOCKER_HUB_USER" --password-stdin;fi
      # if it is a release build package demo and push agent docker image
      install:
        - ./gradlew -PbuildVersion=$RELEASE_VERSION assemble packageDocumentation
        - if [ -n "${TRAVIS_TAG}" ]; then ./gradlew -PbuildVersion=$RELEASE_VERSION packageDemo dockerPush;fi
      script: skip
      before_deploy:
        - mkdir -p ~/bin && curl -sSL -o ~/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && chmod +x ~/bin/jq
        - export PATH=$PATH:~/bin
        - jq --version
        - gem install bundler
        - gem install rspec
        - gem install github_changelog_generator
        - chmod +x ./resources/github-release-script.sh
        - if [ -z "${TRAVIS_TAG}" ]; then echo "Not release build - skipping changelog generation."; else ./resources/github-release-script.sh;fi
        - chmod +x ./resources/generate-documentation-sitemap.sh
        - if [ -z "${TRAVIS_TAG}" ]; then echo "Not release build - skipping sitemap generation."; else ./resources/generate-documentation-sitemap.sh;fi
      deploy:
        #############################
        # MASTER BUILDS
        - provider: s3
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: "docs.inspectit.rocks"
          region: eu-west-1
          skip_cleanup: true
          local_dir: inspectit-oce-documentation/build/asciidoc/html5
          upload-dir: master
          on:
            tags: false
            branch: master
        #############################
        # RELEASE BUILDS
        # > Documentation
        # > Sitemap
        - provider: s3
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: "docs.inspectit.rocks"
          region: eu-west-1
          skip_cleanup: true
          local_dir: inspectit-oce-documentation/build/asciidoc/html5
          upload-dir: releases/latest
          on:
            tags: true
            branch: master
        - provider: s3
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: "docs.inspectit.rocks"
          region: eu-west-1
          skip_cleanup: true
          local_dir: inspectit-oce-documentation/build/asciidoc/html5
          upload-dir: releases/$TRAVIS_TAG
          on:
            tags: true
            branch: master
        - provider: s3
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: "docs.inspectit.rocks"
          region: eu-west-1
          skip_cleanup: true
          local_dir: sitemap
          on:
            tags: true
            branch: master
        # > Github Release
        - provider: releases
          api_key: "${GITHUB_TOKEN}"
          name: "Version $RELEASE_VERSION"
          file:
           - "inspectit-oce-agent/build/inspectit-oce-agent-$RELEASE_VERSION.jar"
           - "inspectit-oce-documentation/build/distributions/inspectit-oce-documentation-$RELEASE_VERSION.zip"
           - "inspectit-oce-demo/build/inspectit-oce-demo-$RELEASE_VERSION.zip"
          skip_cleanup: true
          on:
            tags: true
            branch: master


stages:
  - test
  - name: deploy
    if: repo = inspectIT/inspectit-oce